// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract DAO {
    struct Proposal {
        string description;
        uint256 voteCount;
        bool executed;
    }

    IERC20 public token;
    address public owner;
    mapping(address => bool) public voters;
    Proposal[] public proposals;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can execute");
        _;
    }

    constructor(address tokenAddress) {
        token = IERC20(tokenAddress);
        owner = msg.sender;
    }

    function createProposal(string memory description) public onlyOwner {
        proposals.push(Proposal({ description: description, voteCount: 0, executed: false }));
    }

    function vote(uint256 proposalIndex) public {
        require(token.balanceOf(msg.sender) > 0, "Must hold tokens to vote");
        require(!voters[msg.sender], "You have already voted");
        require(proposalIndex < proposals.length, "Invalid proposal index");

        voters[msg.sender] = true;
        proposals[proposalIndex].voteCount++;
    }

    function executeProposal(uint256 proposalIndex) public onlyOwner {
        require(proposals[proposalIndex].voteCount > 0, "No votes for this proposal");
        proposals[proposalIndex].executed = true;
    }
}
